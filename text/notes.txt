The credits, store text, and victory text are drawn to the screen by
transfering tile values to the PPU.

Text tile values (see sprite*.tbl files):

        0 1 2 3 4 5 6 7 8 9 A B C D E F
      +--------------------------------
    0 |   0 1 2 3 4 5 6 7 8 9 A B C D E
    1 | F G H I J K L M N O P Ĉ R S T U
    2 | V Ĝ Ĵ Ŝ Z = Ŭ
   ...
    D |                               !
    E | " ' ( ) , - . .   X Y

Three subroutines are used to transfer values to the PPU. The first consists
of a series of 32 consecutive STA instructions:

    DRAW_REPEAT:
    03:B980: STA $2007   ; PPU_DATA
    03:B983: STA $2007
    03:B986: STA $2007
    ...

Loading a value to the accumulator and jumping to the subroutine will draw
that tile 32 times.

    STA #$0B  ; "A" (TILE 0x0B)
    JMP DRAW_REPEAT

    ; RESULTS IN 32 A'S DRAWN ACROSS THE SCREEN
    ; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

A lesser number can drawn by jumping to the appropriate place in the series.
For example, to draw 30 A's, jump past the first two instructions.

    STA #$0B
    JMP DRAW_REPEAT+6  ; 2 x 3 BYTES PER INSTRUCTION

    ; RESULTS IN 30 A'S DRAWN ACROSS THE SCREEN

The second subroutine is writes a series of 21 consecutive values. 

    DRAW_CONSEC:
    03:B9EE: STA $2007
    03:B9F1: ADC #$01
    03:B9F3: STA $2007
    03:B9F6: ADC #$01
    03:B9F8: STA $2007
    03:B9FB: ADC #$01
    ...

Again, jumping to the appropriate place in the series allows you to draw less.
For example, to display the alphabet, jump to start of the subroutine to write
A-U and then jump to the 16th STA instruction to write V-Z.

    STA #$0B  ; "A" (TILE 0x0B)
    JMP DRAW_CONSEC
    STA #$20  ; "V" (TILE 0x20)
    JMP DRAW_CONSEC+80  ; 16 x 5 BYTES PER INSTRUCTION

The third subroutine writes 11 characters. The address of the characters is
read from $00B7.

    DRAW_STRING:
    03:BA61: STA $2007
    03:BA64: LDA ($B7),Y
    03:BA66: INY
    03:BA67: STA $2007
    03:BA6A: LDA ($B7),Y
    03:BA6C: INY
    ...

An example that writes HELLO WORLD:

    ; ASSUME THE FOLLOWING BYTES
    ; (TILE OFFSETS FOR HELLO WORLD)
    ; ARE STORED AT $6E20
    ;   12 0F 16 16 10 00 21 19 1C 16 0D

    LDA #$20    ; STORE MEMORY ADDRESS
    STA $B7     ; AT $00B7
    LDA #$6E
    STA $B8

    STY #$00    ; INIT Y REGISTER
    JSR DRAW_STRING

The credits, store text, and victory text are "encoded" in memory as a series
of bytes - the first byte is the offset into one of the above subroutines
followed by the desired tile indexes.

Printing 32 spaces across the screen is thus encoded as:

         3E  00
        --- ---
         |   |
     offset value

Printing "HELLO WORLD" is encoded as:

         7E  12 0F 16 16 10 00 21 19 1C 16 0D
        --- ---------------------------------
         |                 |
     offset              values

Offsets are provided relative to the executing code; here are some offsets
(calculate others as needed):

    7E xx xx xx xx xx xx xx xx xx xx xx   writes 11 bytes
    78 xx xx xx xx xx xx xx xx            writes 8 bytes
    72 xx xx xx xx xx                     writes 5 bytes
    6E xx xx xx                           writes 3 bytes
    6A xx                                 writes byte
    
    42 xx    writes seq of 2 tiles starting with xx
    
    3E xx    writes tile 32 times
    2E xx    writes tile 24 times
    0E xx    writes tile 8 times
    04 xx    writes tile 3 times
    02 xx    writes tile 2 times

Offset 0x00 signals the end of tile/text placement.

Also interspersed in the format is 80 40 xx xx. This temporarily leaves the
routine to shuffle around some memory pointers and presumably perform some
other bookkeeping tasks. xx xx then is the PPU_ADDR where tile placement
should resume (big endian). Examples:

    80 40 00 F0
    80 40 01 C2 
    80 40 02 87
    80 40 03 55

