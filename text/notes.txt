Most text is drawn to the screen using one of three routines that place tiles
into PPU.

The first routine consists of a series of 32 consecutive STA instructions.

    DRAW_REPEAT:
    03:B980: STA PPU_DATA
    03:B983: STA PPU_DATA
    03:B986: STA PPU_DATA
    ...

Jumping to the start of this routine draws the same tile 32 times. For example:

    STA #$0B  ; STORE "A" (TILE 0B)
    JMP DRAW_REPEAT

...will result in 32 A's drawn across the screen, like so:

    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

A lesser number can drawn by jumping to the appropriate place in the series.
For example, to draw 27 A's, jump past the first five STA instructions.

The second routine is a series of 21 consecutive tiles starting with the
provided tile.

    DRAW_CONSEC:
    03:B9EE: STA PPU_DATA
    03:B9F1: ADC #$01
    03:B9F3: STA PPU_DATA
    03:B9F6: ADC #$01
    03:B9F8: STA PPU_DATA
    03:B9FB: ADC #$01
    ...

Again, jumping to the appropriate place in the series will allow you to draw
less. For example, to draw the alphabet, jump to start of the routine to print
A-U and then jump to the 16th STA instruction to print V-Z.

The third routine prints 11 characters from a memory location.

    DRAW_STR:
    03:BA61: STA PPU_DATA
    03:BA64: LDA ($B7),Y
    03:BA66: INY
    03:BA67: STA PPU_DATA
    03:BA6A: LDA ($B7),Y
    03:BA6C: INY
    ...

The text itself is thus stored as a series of offsets into these routines
(relative to the executing code) followed by the desired tile indexes.

Printing A 32 times across the screen is thus encoded as:

         3E  0B
        --- ---
         |   |
     offset value

Printing "HELLO WORLD" is encoded as:


         7E  12 0F 16 16 10 00 21 19 1C 16 0D
        --- ---------------------------------
         |                 |
     offset              values


Here are some offsets (calculate others as needed):

    7E xx xx xx xx xx xx xx xx xx xx xx   print 11 bytes
    78 xx xx xx xx xx xx xx xx            print 8 bytes
    72 xx xx xx xx xx                     print 5 bytes
    6E xx xx xx                           print 3 bytes
    6A xx                                 print byte
    
    42 xx    print seq of 2 tiles starting with xx
    
    3E xx    print tile 32 times
    2E xx    print tile 24 times
    0E xx    print tile 8 times
    04 xx    print tile 3 times
    02 xx    print tile 2 times
    
    00 return (end of text drawing)

Also interspersed in the text format is 80 40 xx xx.

80 40 temporarily leaves tile placement and shuffles around some memory
pointers, and is followed by the PPU ADDR where tile placement should begin
again (big endian). For example:

    80 40 00 F0
    80 40 01 C2 
    80 40 02 87
    80 40 03 55

